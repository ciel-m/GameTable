[{"D:\\GameTable\\gametable\\src\\index.js":"1","D:\\GameTable\\gametable\\src\\reportWebVitals.js":"2","D:\\GameTable\\gametable\\src\\App.js":"3","D:\\GameTable\\gametable\\src\\Table.js":"4","D:\\GameTable\\gametable\\src\\ParsingService.js":"5","D:\\GameTable\\gametable\\src\\LookupService.js":"6"},{"size":503,"mtime":1608329699100,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"8"},{"size":2211,"mtime":1608408024701,"results":"10","hashOfConfig":"8"},{"size":3846,"mtime":1608406191280,"results":"11","hashOfConfig":"8"},{"size":299,"mtime":1608401995158,"results":"12","hashOfConfig":"8"},{"size":475,"mtime":1608408848855,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"uy8no0",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"16"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\GameTable\\gametable\\src\\index.js",[],["29","30"],"D:\\GameTable\\gametable\\src\\reportWebVitals.js",[],"D:\\GameTable\\gametable\\src\\App.js",["31","32"],"import React, { useEffect, useState, useMemo } from \"react\";\nimport axios from 'axios';\nimport \"./App.css\";\nimport Table from \"./Table\";\nimport ParsingService from \"./ParsingService\"\nimport qs from 'query-string';\nimport LookupService from \"./LookupService\";\n\nfunction App() {\n  const [data, setData] = useState([]);\n  const [filter, setFilter] = useState(\"\");\n\n  const Genres = ({ values }) => {\n    return (\n      <>\n        {values.map((genre, idx) => {\n          return (\n            <span key={idx} className=\"badge\">\n              {genre}\n            </span>\n          );\n        })}\n      </>\n    );\n  };\n\n  const columns = useMemo(\n    () => [\n      {\n        Header: \"Games\",\n        columns: [\n          {\n            Header: \"Name\",\n            accessor: \"name\"\n          },\n          {\n            Header: \"Genres\",\n            accessor: \"genres\",\n            Cell: ({ cell: { value } }) => <Genres values={ParsingService.getGenres(value)} />,\n            filterMethod: () => { return false }\n          },\n          {\n            Header: \"Release Date\",\n            accessor: \"released\"\n          },\n          {\n            Header: \"Metacritic Rating\",\n            accessor: \"metacritic\"\n          },\n          {\n            Header: \"ESRB Rating\",\n            accessor: \"esrb_rating\",\n            Cell: ({ cell: { value } }) =>  value ? ParsingService.getESRB(value) : \"Not Listed\"\n          },\n        ]\n      }\n    ],\n    []\n  );\n\n  useEffect(() => {\n    (async () => {\n      const response = await LookupService.getData();\n      console.log(response.data.results)\n      setData(response.data.results)\n    })();\n  }, []);\n\n  async function changeGenre(genre) {\n    const response = await LookupService.getGenre(genre)\n    setData(response.data.results)\n  }\n\n  return (\n    <div className=\"App\">\n      <input\n        type=\"text\"\n        value={filter}\n        placeholder=\"Enter genre\"\n        onChange={event => setFilter(event.target.value)}\n      />\n      <button  onClick={() => {changeGenre(filter)}}>\n        Search\n      </button>\n      <button  onClick={() => {setData([])}}>\n        Reset\n      </button>\n      <Table columns={columns} data={data} />\n    </div>\n  );\n}\n\nexport default App;","D:\\GameTable\\gametable\\src\\Table.js",["33","34","35","36","37"],"import React, { useState, useEffect } from \"react\";\r\nimport { useTable, useFilters, useSortBy, usePagination } from \"react-table\";\r\nimport LookupService from \"./LookupService\";\r\n\r\nexport default function Table({ columns, data }) {\r\n  const [filterInput, setFilterInput] = useState(\"\");\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    prepareRow,\r\n    page,\r\n    canPreviousPage,\r\n    canNextPage,\r\n    pageOptions,\r\n    pageCount,\r\n    gotoPage,\r\n    nextPage,\r\n    previousPage,\r\n    setFilter,\r\n    setPageSize,\r\n    rows,\r\n    state: { pageIndex, pageSize }\r\n  } = useTable(\r\n    {\r\n      columns,\r\n      data,\r\n      initialState: { pageIndex: 0 }\r\n    },\r\n    useFilters,\r\n    useSortBy,\r\n    usePagination\r\n  );\r\n  // const setPageSize = function(value) {\r\n  //   console.log('test')\r\n  //   let currentUrlParams = new URLSearchParams(window.location.search);\r\n  //   currentUrlParams.set('page', value);\r\n  //   this.props.history.push(window.location.pathname + \"?\" + currentUrlParams.toString());\r\n  // };\r\n\r\n\r\n  function handleFilterChange() {\r\n    console.log(\"a\")\r\n    setFilter(\"name\", filterInput);\r\n    setFilterInput(filterInput);\r\n  }\r\n\r\n  function reset() {\r\n    // setFilter(\"name\", \"\")\r\n    // setFilterInput(\"\")\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <table {...getTableProps()}>\r\n        <thead>\r\n          {headerGroups.map(headerGroup => (\r\n            <tr {...headerGroup.getHeaderGroupProps()}>\r\n              {headerGroup.headers.map(column => (\r\n                <th\r\n                  {...column.getHeaderProps(column.getSortByToggleProps())}\r\n                  className={\r\n                    column.isSorted\r\n                      ? column.isSortedDesc\r\n                        ? \"sort-desc\"\r\n                        : \"sort-asc\"\r\n                      : \"\"\r\n                  }\r\n                >\r\n                  {column.render(\"Header\")}\r\n                </th>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </thead>\r\n        <tbody {...getTableBodyProps()}>\r\n          {rows.map((row, i) => {\r\n            prepareRow(row);\r\n            return (\r\n              <tr {...row.getRowProps()}>\r\n                {row.cells.map(cell => {\r\n                  return (\r\n                    <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\r\n                  );\r\n                })}\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n      <div>\r\n        <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\r\n          {\"<<\"}\r\n        </button>{\" \"}\r\n        <button onClick={() => previousPage()} disabled={!canPreviousPage}>\r\n          {\"<\"}\r\n        </button>{\" \"}\r\n        <button onClick={() => nextPage()} disabled={!canNextPage}>\r\n          {\">\"}\r\n        </button>{\" \"}\r\n        <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\r\n          {\">>\"}\r\n        </button>{\" \"}\r\n        <span>\r\n          Page{\" \"}\r\n          <strong>\r\n            {pageIndex + 1} of {pageOptions.length}\r\n          </strong>{\" \"}\r\n        </span>\r\n        <span>\r\n          | Go to page:{\" \"}\r\n          <input\r\n            type=\"number\"\r\n            defaultValue={pageIndex + 1}\r\n            onChange={e => {\r\n              const page = e.target.value ? Number(e.target.value) - 1 : 0;\r\n              gotoPage(page);\r\n            }}\r\n            style={{ width: \"100px\" }}\r\n          />\r\n        </span>{\" \"}\r\n        <select\r\n          value={pageSize}\r\n          onChange={e => {\r\n            console.log(e.target.value)\r\n            setPageSize((e.target.value));\r\n          }}\r\n        >\r\n          {[10, 20, 30, 40, 50].map(pageSize => (\r\n            <option key={pageSize} value={pageSize}>\r\n              Show {pageSize}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n    </>\r\n  );\r\n}","D:\\GameTable\\gametable\\src\\ParsingService.js",[],"D:\\GameTable\\gametable\\src\\LookupService.js",[],{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":2,"column":8,"nodeType":"44","messageId":"45","endLine":2,"endColumn":13},{"ruleId":"42","severity":1,"message":"46","line":6,"column":8,"nodeType":"44","messageId":"45","endLine":6,"endColumn":10},{"ruleId":"42","severity":1,"message":"47","line":1,"column":27,"nodeType":"44","messageId":"45","endLine":1,"endColumn":36},{"ruleId":"42","severity":1,"message":"48","line":3,"column":8,"nodeType":"44","messageId":"45","endLine":3,"endColumn":21},{"ruleId":"42","severity":1,"message":"49","line":12,"column":5,"nodeType":"44","messageId":"45","endLine":12,"endColumn":9},{"ruleId":"42","severity":1,"message":"50","line":42,"column":12,"nodeType":"44","messageId":"45","endLine":42,"endColumn":30},{"ruleId":"42","severity":1,"message":"51","line":48,"column":12,"nodeType":"44","messageId":"45","endLine":48,"endColumn":17},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","'qs' is defined but never used.","'useEffect' is defined but never used.","'LookupService' is defined but never used.","'page' is assigned a value but never used.","'handleFilterChange' is defined but never used.","'reset' is defined but never used.","no-global-assign","no-unsafe-negation"]